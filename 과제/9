9-1

1.브랜치 병합 개요
2-way상태에서 base의 이해
-master 브랜치 커밋 B에서 분기되는 bugfix브랜치
커밋B
선형적 통합 rebase 이해
-브랜치 bugfix에서 base를 바꾸는 재배치하기 이전
-재배치 rebase 병합 수행
rebase를 이용한 브랜치 병합 과정
-fast-forward 병합 방식
-rebase만 하면 다음 그림처럼 master의 위치는 그대로 유지
-마스터 브랜티의 위치를 병견하기 위해서는 
Rebase에서의 충돌
-충돌 발생 가능
-충돌 발생 후 해결 절차

2.2-wat,fast-forward와 rebase 비교
-merge
-rebase
fast-forward merge와 rebase 비교
-fast-forward merge
-rebase
1)3-way병합
2)Renase 병합
$git renase <newparent>(branch)
-일반적 rebase 방법
-다른 rebase 방법:어느 브랜치든 main topic 순서로 재배치 방법
Rebase 수행
-브랜치 main에서 브랜치 topic으로 빨리 감기

9-2
1.최신 커밋 수정
최근 커밋 메세지 수정
기본 편집기 설정 방법
-git config —global core.editor ‘code—wait’
설정된 편집기로 최근 커밋 메시지 수정
-git commit —amend
-새로운 커밋 ID로 수정됨
최근 커밋 메시지를 직접 입력해 수정
-git commit —amend -m “an uppdate commit message”
-새로운 커밋 ID로 수정됨
최근 커밋 내용 수정
HEAD의 내용 수정
-새로운 파일을 추가하거나 파일을 수정한 후
-새로운 커밋으로 생성하지 않고
-최신 커밋에 반영
-새로운 커밋 ID로 수정됨

2.renase-i로 여러 커밋 수정
rebase —interactive 를 사용
작업 공간이 깨끗한 이후, 이전 여러 개의 커밋을 수정
 이전 커밋을 다시 작성한 경우 새 ID가 부여
rebase의 —interactive를 사용하여 커밋 시퀀스를 새로운 기본 커밋에 결합
git rebase -i HEAD~3
git rebase —interactive HEAD~3
HEAD~3 : 수정할 커밋의 직전 커밋
실제 HEAD~2 부터 수정 가능
rebase 의 —interactive 주요 명령어
git rebase —interactive HEAD~3
기본 편집기로 열리며, HEAD~3이면 HEAD~2,HEAD~1, HEAD  3개의 행 편집ㄱㄴ
로그 결과와 다르게 오래된 커밋부터 표시
주요 reabase -i 대화형 명령어
-p (ick) : 해당 커밋을 수정하지 않고 그대로 사용
-r (eword) : 개별 커밋 메시지를 다시 작성
-s (quash) : 계속된 이후 커밋을 이전 커밋에 결합
-d (rop) : 커밋 자체를 삭제
명령 drop
- [ ]  마지막 커밋 제거
- git rebase —interactive HEAD~2

9-3
1.vscode에서 깃 활용 기초
수정 작업 취소
작업 영역과 스테이지 영역 파일 수정 취소
