8-1
1.브랜치 병합 개요
-브랜치 병합

병합(merge)

- 두 개의 브랜치를 하나로 모으는 과정
- fast-forward(빨리 감기) 병합
- 3-awy 병합

빨리감기 fast-forward 병합의 이해

- fast-forward 병합 조건
- 현재 브랜치 master 가 병합할 대상 커밋의 직접적인 뿌리가 되는 경우
- 간단히 두 브랜치가 일렬 상태
- bugfix 브랜치 이력이 master 브랜치 이력을 모두 포함하는 경우
- 브랜치 master에서 병합
- git merge bugfix

3-way 병합

- 새로운 커밋을 사용하여 두 기록을 합침

3-way 병합 수행

새로운 커밋 E 생성
- 두 브랜치의 변경을 가져온 ‘merge commit’병합 커밋 E를 생성
- 병합 완료 후, 통합 브랜치인 ‘master’ 브랜치로 통합된 이력이 생성
기본이 fat forward 상태에서 non fast forward 병합
-마스터에서 dev1을 fast forward로 병합
-마스터에서 dev1을 non fast forward로 병합

2.병합의 다양한옵션
 $git merge {병합할 브랜피 명}
   -보통의 병합,융통성 있는 병합
  $ git merge —no-ff {병합할 브랜치 명}

- 무조건 3-way 병합되는 옵션

$ git merge —ff-only {병합할 브랜치 명}

- 상태가 fast forward인 일렬 상태에서만 병합 진행

$ git merge—squash {병합할 브랜치 명}

- 현재 브랜치에 병합 대상과의 합치는 커밋을 하나 생성해 병합
- → 병합되는 브랜치는 사용하지 않고 그대로 남음

8-3
1.병합 충돌
병합 충돌(conflict) 이해

3-way 상태에서 두 브랜치의 동일 조상인 커밋1을 기준

- 병합할 두 브랜치 마지막 커밋을 비교

충돌의 기준

- 파일 충돌 없음
- 수정 되지 않거나 한쪽 브랜치에서만 수정되면

- 파일 충돌 발생
- 두 브랜치 모두에서 변경 사항이 달리 발생한 파일

2.충돌 해결
병합 취소후 다시 병합
병합 취소
다시 병합
충돌해결3-way 병합 수행
병합 전까지 수행
병합 시 충돌 발생
원하는 코드로 수정
코드 수정 후 반드시 커밋이 필요

